Event:

1. Definition: 
As mentioned above, events are actions or occurrences that happen in the system you are programming 
— the system produces (or "fires") a signal of some kind when an event occurs, 
and provides a mechanism by which an action can be automatically taken (that is, some code running) when the event occurs.
 For example, in an airport, when the runway is clear for take off, a signal is communicated to the pilot. 
 As a result, the plane can safely takeoff.

 In the case of the Web, events are fired inside the browser window,
  and tend to be attached to a specific item that resides in it — this might be a single element, set of elements,
   the HTML document loaded in the current tab, or the entire browser window.
   There are many different types of events that can occur. For example:

The user selects a certain element or hovers the cursor over a certain element.
The user chooses a key on the keyboard.
The user resizes or closes the browser window.
A web page finishes loading.
A form is submitted.
A video is played, paused, or finishes.
An error occurs.

You can gather from this (and from glancing at the MDN Event reference) that there are a lot of events that can be responded to.

Each available event has an event handler, which is a block of code (usually a JavaScript function that you as a programmer create) 
that runs when the event fires. When such a block of code is defined to run in response to an event, 
we say we are registering an event handler. Note: Event handlers are sometimes called event listeners — 
they are pretty much interchangeable for our purposes, although strictly speaking, they work together. 
The listener listens out for the event happening, and the handler is the code that is run in response to it happening.

2. Event handler properties

These are the properties that exist to contain event handler code we have seen most frequently during the course. Returning to the above example:

const btn = document.querySelector('button');

btn.onclick = function() {
  const rndCol = 'rgb(' + random(255) + ',' + random(255) + ',' + random(255) + ')';
  document.body.style.backgroundColor = rndCol;
}
The onclick property is the event handler property being used in this situation. 
It is essentially a property like any other available on the button (e.g. btn.textContent, or btn.style),
 but it is a special type — when you set it to be equal to some code, that code is run when the event fires on the button.

You could also set the handler property to be equal to a named function name (like we saw in Build your own function). The following works just the same:
const btn = document.querySelector('button');

function bgChange() {
  const rndCol = 'rgb(' + random(255) + ',' + random(255) + ',' + random(255) + ')';
  document.body.style.backgroundColor = rndCol;
}

btn.onclick = bgChange;

3. Inline event handlers — don't use these
  <button onclick="bgChange()">Press me</button>

4. There are only two methods you should consider for handling events:
Event handler properties have less power and options, but are easier to use. So as you begin learning, you might want to start with these.
addEventListener() is more complex, but also more powerful. So after you’ve begun learning, you should try to use it where possible.
The main advantages of addEventListener() are that:

You can remove event-handler code if needed, using removeEventListener().
You can add multiple listeners of the same type to elements, if required.
For example, you can call addEventListener('click', function() { ... }) on an element multiple times, with different functions specified in the second argument. This is impossible with event handler properties because any subsequent attempts to set a property will overwrite earlier ones, e.g.:

element.onclick = function1;
element.onclick = function2;
etc.
Copy to Clipboard
You should never use the HTML event handler attributes — those are outdated, and using them is bad

5. Event objects
Sometimes inside an event handler function, you'll see a parameter specified with a name such as event, evt, or e. This is called the event object, and it is automatically passed to event handlers to provide extra features and information. For example, let's rewrite our random color example again slightly:

function bgChange(e) {
  const rndCol = 'rgb(' + random(255) + ',' + random(255) + ',' + random(255) + ')';
  e.target.style.backgroundColor = rndCol;
  console.log(e);
}

btn.addEventListener('click', bgChange);

6. Bubbling and capturing event
Bubbling and capturing explained
When an event is fired on an element that has parent elements (in this case, the <video> has the <div> as a parent),
 modern browsers run three different phases — the capturing phase, the target phase, and the bubbling phase.

In the capturing phase:

The browser checks to see if the element's outer-most ancestor (<html>) has an onclick event handler registered on it for the capturing phase, and runs it if so.
Then it moves on to the next element inside <html> and does the same thing, 
then the next one, and so on until it reaches the direct parent of the element that was actually selected.
In the target phase:

The browser checks to see if the target property has an event handler for the click event registered on it, and runs it if so.
Then, if bubbles is true, it propagates the event to the direct parent of the selected element, 
then the next one, and so on until it reaches the <html> element. Otherwise, if bubbles is false,
 it doesn’t propagate the event to any ancestors of the target.
In the bubbling phase, the exact opposite of the capturing phase occurs:

The browser checks to see if the direct parent of the element selected has an onclick event handler registered on it for the bubbling phase,
 and runs it if so.
Then it moves on to the next immediate ancestor element and does the same thing, 
then the next one, and so on until it reaches the <html> element.
In modern browsers, by default, all event handlers are registered for the bubbling phase.
 So in our current example, when you select the video, the event bubbles from the <video> element outwards to the <html> element.
  Along the way:

by default all event handlers are registered in the bubbling phase, and this makes more sense most of the time. 
If you really want to register an event in the capturing phase instead, you can do so by registering your handler using addEventListener(),
 and setting the optional third property to true.  

